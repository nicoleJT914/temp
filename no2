import java.util.*;

public class test4 {

    private static Stack<Integer> stack = new Stack<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        List<String> list = get(input.length() / 2);
        list.remove(input);
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (String s : list) {
            Integer result = LCS("(())()", s);
            if (result > max) {
                max = result;
            }
            if (map.get(result) == null)
                map.put(result, 1);
            else
                map.put(result, (map.get(result) + 1));
        }
        System.out.println(map.get(max));
    }

    public static void get(ArrayList<String> list, int n, int left, int right, String tempStr) {
        if (left < right)
            return;
        if (left + right == n * 2) {
            if (left == right) {
                list.add(tempStr);
            }
            return;
        }
        get(list, n, left + 1, right, tempStr + "(");
        get(list, n, left, right + 1, tempStr + ")");
    }

    public static ArrayList<String> get(int n) {
        ArrayList<String> list = new ArrayList<String>();
        get(list, n, 0, 0, "");
        return list;
    }

    public static int LCS(String s1, String s2) {
        int[][] c = new int[s1.length()][s2.length()];

        // initialize the elements without top left element
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) == s2.charAt(0)) {
                c[i][0] = 1;
            }
        }
        for (int j = 0; j < s2.length(); j++) {
            if (s1.charAt(0) == s2.charAt(j)) {
                c[0][j] = 1;
            }
        }
        for (int i = 1; i < s1.length(); i++) {
            for (int j = 1; j < s2.length(); j++) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    c[i][j] = c[i - 1][j - 1] + 1;
                } else if (c[i][j - 1] > c[i - 1][j]) {
                    c[i][j] = c[i][j - 1];
                } else {
                    c[i][j] = c[i - 1][j];
                }
            }
        }
        return c[s1.length() - 1][s2.length() - 1];
    }
}
